@model Everything2Everyone.Models.ArticleBundle
@using System.Security.Claims

<partial name="ErrorMessagePartial" />

<div class="vw-article">
    <!-- Article information -->
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div class="vw-article-title">@Model.Article.Title</div>
        @if (ViewBag.ShowEditDeleteButtons)
        {
            <div style="display:flex; align-items: center;">
                @if(this.User.IsInRole("Administrator")){
                    <form method="get" action="/articles/restrict/@Model.Article.ArticleID">
                        <button type="submit" class="btn-basic" style="background:var(--top-gradient); border:none">
                            <img src="~/images/Icons/restrict.svg"
                            style="height: 52px; width: 52px;" />
                        </button>
                    </form>
                }
                
                <!-- Check if article is not restricted and the user is the publisher of the article-->
                <!-- If the user is administrator display it anyway-->
                @if ( (Model.Article.IsRestricted == false && Model.Article.UserID == User.FindFirst(ClaimTypes.NameIdentifier).Value) ||
                    this.User.IsInRole("Administrator")
                )
                {
                    <a href="/Articles/Choose-Version/@Model.Article.ArticleID">
                        <img src="~/images/Icons/edit.png"
                        style="height: 64px; width:64px;" />
                    </a>

                    <form method="post" action="/articles/delete/@Model.Article.ArticleID">
                        <button style="background:var(--top-gradient); border:none" type="submit">
                            <img src="/Images/Icons/delete.png" style="height: 50px; width:50px;">
                        </button>
                    </form>
                }

            </div>
        }
    </div>

    <div class="vw-article-author">
        posted by 
        @if( Model.Article.User.ShowPublicIdentity == true){
            @Model.Article.User.FirstName @Model.Article.User.LastName
        } else{
            @Model.Article.User.NickName
        }
    </div>
    <div class="vw-article-link-editor"
         style="margin: 8px 0px;">
        <div class="vw-centeralized">
            <img src="~/images/Icons/category.png" style="margin-right: 4px"/>
            <a class="vw-article-details" href="/articles/index/?categoryID=@Model.Article.CategoryID">@Model.Article.Category.Title</a>
        </div>
        <div class="vw-centeralized vw-article-details">
            <img src="~/images/Icons/date.png" style="margin-right: 4px;"/>
            @Model.Article.PublicationDate.ToString(string.Format("dd.MM.yyyy - HH:mm"))
         </div>
    </div>

    <!-- Display chapters-->
    @foreach (Chapter chapter in Model.Chapters){
        <div class="vw-chapter">
            <h2 class="vw-chapter-title">@chapter.Title</h2>
            <p>@Html.Raw(@chapter.ContentUnparsed)</p>
        </div>
    }

    <!-- Add comment, only if user is authentificated -->
    @if( User.Identity.IsAuthenticated == true) {
        <form method="POST" action="/Articles/Show/@Model.Article.ArticleID" class="vw-article-add-comment">
            <input type="hidden" name="ArticleID" value="@Model.Article.ArticleID" />

            <textarea name="Content" placeholder="Add a comment..." rows="4" id="comment_content"></textarea>
            @Html.ValidationMessage("Content", null, new { @class = "text-danger"})

            <div class="vw-article-add-comment-btns">
                <div class="btn-basic btn-delete" id="clear_comment">Clear</div>
                <button class="btn-basic btn-add" type="submit">Post</button>
            </div>
        </form>
    }

    <!-- Display comments: -->
    @foreach ( var comment in ViewBag.ArticleComments)
    {
        <div class="vw-article-comment">
            <div>

                <div class="vw-comment-author">
                <!-- Verify if the user wants his name to be publicly displayed-->
                @if (comment.User.ShowPublicIdentity == true){
                    @comment.User.FirstName @comment.User.LastName <span>@comment.User.NickName -
                        <!-- Check if the comment was edited or not-->
                        @if( comment.DateEdited != null){
                            @comment.DateEdited.ToString("MM/dd/yyyy")
                        } else{
                            @comment.DateAdded.ToString("MM/dd/yyyy")
                        }
                    </span>
                } else {
                    @comment.User.NickName<span>
                        <!-- Check if the comment was edited or not-->
                        @if (comment.DateEdited != null)
                        {
                            @comment.DateEdited.ToString("MM/dd/yyyy")
                        } else {
                            @comment.DateAdded.ToString("MM/dd/yyyy")
                        }
                    </span>
                }
                </div>
                <div class="vw-comment-content">
                    @comment.Content
                </div>
            </div>
            
            <div class="vw-sidebar-category-edit">

                <!-- Display edit options only if user is Administrator OR the one who posted-->
                @if(ViewBag.currentUserID == comment.User.Id || this.User.IsInRole("Administrator")){
                    <form method="GET" action="/Comments/Edit/@comment.CommentID">
                        <button type="submit"><img src="/Images/Icons/edit.png" alt="edit"></button>
                    </form>

                    <form method="POST" action="/Comments/Delete/@comment.CommentID">
                        <button type="submit"><img src="/Images/Icons/delete.png" alt="delete"></button>
                    </form>
                }

            </div>
        </div>
    }
</div>

<script>

    // On button click of 'Clear', the textarea that contains the
    // comment that the user is writing will be cleared
    const newCommentContent = document.querySelector("#comment_content");
    const clearNewComment = document.querySelector("#clear_comment");
    console.log(clearNewComment);

    clearNewComment.addEventListener("click", () => {
        newCommentContent.value = "";
    });

</script>
